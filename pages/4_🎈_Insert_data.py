import streamlit as st
# import csv
from typing import List
import psycopg2
from pydantic import BaseModel, ValidationError
import pandas as pd


# --- Define your Pydantic model
class Word(BaseModel):
    # Assuming word_id is auto-generated by the database
    french_word: str
    german_word: str
    category: str
    subcategory: str
    example_sentence: str | None = None  # Optional example sentence


# --- Function to read and validate CSV data
def read_and_validate_csv(uploaded_file):
    valid_data = []
    try:
        df = pd.read_csv(uploaded_file)  # Directly read CSV from Streamlit upload
        for _, row in df.iterrows():
            try:
                # Convert example_sentence to None if empty
                if pd.isna(row["example_sentence"]) or row["example_sentence"] == "":
                    row["example_sentence"] = None
                word = Word(**row.to_dict())
                valid_data.append(word)
            except ValidationError as e:
                st.error(f"Validation error in row {_+1}: {e}")
                return None  # Stop processing if validation fails
        return valid_data
    except Exception as e:  # Handle file reading errors
        st.error(f"Error reading CSV file: {e}")
        return None


# --- Function to insert data, checking for duplicates
def insert_data_into_db(db_url, data: List[Word]):
    """Inserts data, checking for duplicates based on the German word."""
    if data is None:
        return

    conn = psycopg2.connect(db_url)
    cursor = conn.cursor()
    try:  # Outer try...except block to catch overall database errors
        for word in data:
            try:
                # Check for duplicates (using German word)
                check_query = "SELECT 1 FROM words WHERE german_word = %s"
                cursor.execute(check_query, (word.german_word,))
                exists = cursor.fetchone()

                if not exists:
                    insert_query = """
                        INSERT INTO words (french_word, german_word, category, subcategory, example_sentence)
                        VALUES (%s, %s, %s, %s, %s)
                    """
                    cursor.execute(insert_query, (word.french_word, word.german_word, word.category, word.subcategory, word.example_sentence))
                    st.success(f"Inserted: {word.german_word}") # Feedback inside the loop
                else:
                    st.warning(f"Skipped (duplicate German word): {word.german_word}") # Inside loop

            except psycopg2.Error as e:
                st.error(f"Database error inserting word {word.german_word}: {e}")
                conn.rollback()  # Rollback for individual word insertion errors

        conn.commit()  # Commit outside the loop after all insertions
    except psycopg2.Error as e:
        st.error(f"Overall database error: {e}")
        conn.rollback()

    finally: # finally outside loop
        cursor.close()
        conn.close()

# --- Streamlit App ---
st.title("Insert Words from CSV")

DATABASE_URL = st.secrets["my_database"]["DATABASE_URL"]  # Retrieve database URL from Streamlit secrets

# --- Authentication Check ---
user_id = st.session_state.get("user_id")
if user_id != 4:
    st.warning("You do not have permission to insert data.")
    st.stop()  # Stop execution if not authorized

# --- File Upload ---
uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

if uploaded_file:
    validated_data = read_and_validate_csv(uploaded_file)
    if validated_data: # Check if validated data is not None
        insert_data_into_db(DATABASE_URL, validated_data)
        st.cache_data.clear()
        st.balloons()